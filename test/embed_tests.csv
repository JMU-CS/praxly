Module Name,Program Code,Expected Output,Expected Error
Arrays,"// first, initialize the array
int[] a ⟵ {5, 9, 2, 10, 15};

// Then, print a value from it
print a[0];",5,

Arrays,"int pos ⟵ 2
int[] a ⟵ {5, 9, 8, 10, 15};

print a[pos]",,

Arrays,"int[] a ⟵ {5, 9, 8, 10};
int sum ⟵ a[0] + a[3] + a[2];
print sum;",,

Arrays,"int[] a ⟵ {5, 9, 2, 10, 15};

print a[0];
a[0] ⟵ 20;
print a[0];",,

Arrays,"int[] a ⟵ {5, 9, 2, 10};

a[0] ⟵ a[0] * 3;
a[1] ⟵ (a[0] + 5) / 2;
a[3] ⟵ a[0]",,

Iteration,"float[] heights ⟵ {5.8, 4.9, 6.3, 5.2, 5.7};

int count ⟵ 0;
while (count < 5)
    heights[count] ⟵ heights[count] * 12;
    count ⟵ count + 1;
end while",,

Iteration,"int count ⟵ 0;
while (count < 100)
    heights[count] ⟵ heights[count] * 12;
    count ⟵ count + 1;
end while",,

Iteration,"int counter ⟵ 0;
while ( counter < 10 )
    print counter;
    counter ⟵ counter + 1;
end while",,

Iteration,"for ( int i ⟵ 0; i < 10; i ⟵ i + 1 )
    print i;
end for",,

Iteration,"float[] heights ⟵ {5.8, 4.9, 6.3, 5.2, 5.7};

for (int count ⟵ 0; count < 5; count ⟵ count + 1)
    heights[count] ⟵ heights[count] * 12;
end for",,

Iteration,"float[] scores ⟵ {75.0, 80.0, 40.0, 98.5, 100.0};

float avg ⟵ 0;

for (int i ⟵ 0; i < 5; i ⟵ i + 1)
    avg ⟵ avg + scores[i];
end for

avg ⟵ avg / 5;
print avg;",,

Nested,"int counter1 ⟵ 0;
while ( counter1 < 10 )
    int counter2 ⟵ 0;
    while ( counter2 < 10 )
        print ""Hello!"";
        counter2 ⟵ counter2 + 1;
    end while
    counter1 ⟵ counter1 + 1;
end while",,

Nested ,"int counter2 ⟵ 0;
while ( counter2 < 10 )
    print ""Hello!"";
    counter2 ⟵ counter2 + 1;
end while",,

If-Statements,"boolean b ⟵ true;

if (b)
    print 'y';
end if",,

If-Statements,"int c ⟵ 5;
boolean e ⟵ false;

if (e)
    print c + 10;
    print c;
end if

e ⟵ true;

if (e)
    print c + 15;
end if",,

If-Statements,"int c ⟵ 5;
boolean e ⟵ c < 10;

if (e)
    print c + 10;
    print c
end if

if (c == 3)
    print c + 15;
end if",,

If-Statements,"int secret_number ⟵ 13;

int guess ⟵ user_input;

print secret_number == guess;",,

If-Statements,"print ""Guess a number!""; // output a message

int secret_number ⟵ 13;
int guess ⟵ user_input;

if( secret_number == guess )
    print ""You got it!""
end if

if( secret_number != guess )
    print ""You did not get it...""
end if",,

If-Statements,"print ""Guess a number between 1 and 10"";
int n ⟵ user_input;

if(n == 5)
    print ""You got it!"";
else
    print ""You didn't get it."";
end if",,

More-ifs,"print ""Guess a number between 1 and 10"";
int n ⟵ user_input;

if(n == 5)
    print ""Correct!"";
elseif (n == 4 or n == 6)
    print ""You're close!"";
else
    print ""Incorrect!"";
end if",,

More-ifs,"print ""Guess a number between 1 and 10"";
int n ⟵ user_input;

if (n < 5)
    print ""Too low!"";
    if (n == 4)
        print ""Pretty close, though."";
    end if
else if (n > 5)
    print ""Too high!"";
    if(n == 6)
        print ""Pretty close, though.;
    end if
else
    print ""You got it!"";
end if",,

Looping,"int count ⟵ 0;

while ( count < 5)
    print ""Looping!"";
end while",,

Looping,"int count ⟵ 0;

while (count < 5 )
    print ""Looping"";
    count ⟵ count + 1; // increment `count`
end while

print ""All done!"";",,

Looping,"int count ⟵ 0;

do
    count ⟵ count + 2;
    print ""Looping!"";
while (count < 2)",,

Looping,"int count ⟵ 2;

while ( count < 2)
    print ""Loop!"";
end while",,

Looping,"int count ⟵ 2;

do
    print ""Loop!"";
while ( count < 2 )",,

Compound-Boolean,"print ""Welcome to the game!"";
int answer ⟵ random;
int guesses ⟵ 0;

while (guesses <= 3)
    print ""Guess a number between 1 and 6"";
    int n ⟵ user_input;

    if(n == answer)
        print ""You got it!"";
        guesses ⟵ guesses + 10;
    else
        print ""That's not it!"";
        guesses ⟵ guesses + 1;
    end if
end while

if (n == answer)
    print ""You won!"";
    if (guesses == 10)
        print ""You got it on the first try!"";
    end if
else
    print ""You lost!"";
end if",,

Compound-Boolean,"print ""How old are you?"";
int age = user_input;

print ""Have you completed driver's ed? Type 1 for Yes, 2 for No."";
int ed = user_input;

print ""How is your vision (rate from 1 to 5, with 5 being the best)"";
int vision = user_input;

if(age >= 16 and ed == 1 and vision > 2)
    print ""You are eligible!"";
else
    print ""You are not eligible."";
End",,

Compound-Boolean,"// These two operations always produce the same result!
print not (A or B);
print (not A) and (not B);

// Likewise, these two operations always produce the same result:
print not (A and B);
print (not A) or (not B);",,

Procedure-Basics,"void greet()
    print ""Hello!"";
    print ""How are you?"";
end greet",,

Procedure-Basics,"// procedure definition
void greet()
    print ""Hello!"";
    print ""How are you?"";
end greet

// main program
greet();
greet();
print ""Are you there?"";
Greet();",,

Procedure-Basics,"// procedure definition
void getRandom()
    int r ⟵ random // local variable
end getRandom

// main program
int r ⟵ 10;   // global variable
getRandom(); // call the procedure
print r;",,

Procedure-Basics,"// procedure definition
void printSum()
    int a ⟵ 10;
    int b ⟵ 15;
    print a + b;
end printSum

// main program
printSum();
print a * b; // ERROR!",,

Params-and-Return,"print ""What is the capital of Virginia?"";
print ""1: Washington 2: Richmond 3: Norfolk"";
int ans ⟵ user_input;

if ( ans == 2 )
    print ""Correct!"";
else
    print ""Incorrect"";
end if",,

Params-and-Return,"// These things change for each question
String ques ⟵ ""What is the capital of Virginia?"";
String choices ⟵ ""1: Washington 2: Richmond 3: Norfolk"";
int correct_ans ⟵ 2;

// This code stays the same for each question
print ques;
print choices;
int ans ⟵ user_input;

if ( ans == correct_ans )
    print ""Correct!""
else
    print ""Incorrect""
end if",,

Params-and-Return,"// procedure definition
void askQ()
    print ques;
    print choices;
    int ans ⟵ user_input;

    if ( ans == correct_ans )
        print ""Correct!""
    else
        print ""Incorrect""
    end if
end askQ

// main program
String ques ⟵ ""What is the capital of Virginia?"";
String choices ⟵ ""1: Washington 2: Richmond 3: Norfolk"";
int correct_ans ⟵ 2;

askQ();

ques ⟵ ""What is the capital of Maryland?"";
choices ⟵ ""1: Baltimore 2: D.C. 3: Annapolis"";
correct_ans ⟵ 3;

AskQ();",,

Params-and-Return,"void askQ(String ques, String choices, int correct_ans)
    print ques;
    print choices;
    int ans ⟵ user_input;

    if ( ans == correct_ans )
        print ""Correct!""
    else
        print ""Incorrect""
    end if
end askQ",,

Params-and-Return,"int askQ(String ques, String choices, int correct_ans)
    print ques;
    print choices;
    int ans ⟵ user_input;

    if ( ans == correct_ans )
        print ""Correct!""
        return 1;
    else
        print ""Incorrect""
        return 0;
    end if
end askQ",,

Params-and-Return,"int score ⟵ 0;
score ⟵ askQ(""What is the capital of Richmond?"", ""1: Washington 2: Richmond 3: Norfolk"", 2);
print score;",,

Recursion,"void askQ()
    int correct ⟵ 0;
    while ( correct == 0 )
        print ""What is 5 + 5?"";
        int ans ⟵ user_input;
        if ( ans == 10 )
            print ""Correct!"";
            correct ⟵ 1;
        else
            print ""Incorrect"";
        end if
    end while
end askQ",,

Recursion,"void askQ()
    print ""What is 5 + 5?"";
    int ans ⟵ user_input;
    if ( ans == 10 )
        print ""Correct!"";
    else
        print ""Incorrect"";
        askQ(); // recursive call
    end if
end askQ",,

Recursion,"void factorial(int n)
    if ( n == 1)
        return 1
    else
        return n * factorial( n - 1 );
    end if
end factorial",,

Algorithm Design,"max ← array[0]
for (int i ← 0; i < arrayLength; i ← i + 1)
     current ← array[i]
     if (current > max)
	max ← current
print max",,

Search Algorithms,"int linearSearch( String [] arr, int arrLength, String target )
    for ( int j ← 0; j < arrLength; j ← j + 1 )
        String val ← arr[j]
        if ( val == target )	// found!
            return j
        end if
    end for
    return -1	// not found
end linearSearch",,

Search Algorithms,"int binarySearch( String [] arr, int arrLength; String target )
    int lower ← 0			// lower and upper indices define range
    int upper ← arrLength - 1
    while ( lower < upper )
        int middle ← (lower+upper) / 2		// middle index in range
        String val ← arr[middle]
        if ( target > current )		// adjust range for next iteration
            lower ← middle + 1
        else
            if ( target < current )
                    upper ← middle - 1
            else // target == current	// item found!
                    return middle
            end if
        end if
    end while
    return -1			// item not found
end binarySearch",,

Sorting Algorithms,"int insertionSort( String [] arr, int length )
     for ( int j ← 1; j < length; j ← j + 1 )
          String val ← arr[j]	// new item to be inserted
          int k ← j - 1
          while ( k ≥ 0 and arr[k] > val )	// shift previously sorted items
               arr[k + 1] ← arr[k]
               k ← k - 1
          end while
          arr[k + 1] ← val		// insert new item
     end for
end insertionSort",,

Sorting Algorithms,"int selectionSort( String [] arr, int length )
     for ( int j ← 0; j < length; j ← j + 1 )
          int min ← j
          for ( int k ← j + 1; k < length; k ← k + 1 )	// find minimum
               if (arr[k] < arr[min])
                    min ← k
          end for
          String temp ← arr[j]	// swap
          arr[j] ← arr[min]
          arr[min] ← temp
     end for
end selectionSort",,

Assigning-Variables,"int data ⟵ 10;
print data",,

Assigning-Variables,"print 100; /* line feed after */
print 200; /* line feed after */
print 300; /* line feed after */",,

Expressions,"int counter ⟵ 0;
print counter;

counter ⟵ counter + 1;
print counter;",,

Expressions,"int result ⟵ 7 / 2;
print result;",,

Expressions,"float result ⟵ 7 / 2;
print result;",,

Expressions,"float one_third ⟵ 1 / 3;
print one_third; /* line feed after */

float whole ⟵ one_third * 3;
print whole; /* line feed after */",,

Expressions,"float result ⟵ 6.0 % 4.2;
print result;",1.8,
